asyncio.wait(aws, loop=None, timeout=None, return_when=asyncio.ALL_COMPLETED) return (done, pending)

    return_when=asyncio.FIRST_COMPLETED - вернуть результат по первому выполненному таску
    return_when=asyncio.ALL_COMPLETED - вернуть результат только когда все таски будут выполнены.
    return_when=asyncio.FIRST_EXCEPTION - вернуть результат по первой возникшей ошибке.


Работа с асинхронными функциями: asyncio.wait() позволяет вам управлять несколькими асинхронными функциями и ждать
 их завершения. При достижении timeout незавершенные задачи возвращаются в pending.

Возврат результатов: asyncio.wait() возвращает два списка: список выполненных задач и список невыполненных задач,
 что позволяет вам получить детальную информацию о состоянии выполнения задач.

Контроль порядка выполнения: с помощью asyncio.wait() вы можете указать, когда вы хотите получить результаты
(return_when=), такие как после завершения всех задач, после завершения первой задачи или после возникновения
 первого исключения.

Обработка исключений: если в одной из задач возникло исключение, то вы можете получить его с помощью метода
 task.exception(), о котором мы будем говорить далее.

Оптимизация производительности: asyncio.wait() позволяет оптимизировать производительность вашего кода, так как вы
 можете ждать завершения нескольких задач одновременно, а не по одной.

Легкость использования: asyncio.wait() имеет простой интерфейс и легко использовать, что делает его идеальным для
 управления асинхронными задачами.
