asyncio.gather(*aws, loop=None, return_exceptions=False)
    return_exceptions = True - Игнорирование исключений, возвращает в список
    return_exceptions = False - Не игнорирует исключения.

Одновременное выполнение: asyncio.gather() позволяет выполнять несколько корутин или футур одновременно, что ускоряет
 выполнение программы и повышает ее производительность.

Управление исключениями: asyncio.gather() позволяет управлять исключениями, возникающими в корутинах. С помощью
 параметра return_exceptions=True мы можем выбрать, нужно ли возвращать исключения в результате работы функции.

Простота использования: asyncio.gather() очень проста в использовании и позволяет выполнять несколько корутин или футур
 одновременно с помощью одной функции.

Блокировка цикла: asyncio.gather() блокирует цикл asyncio, пока все корутины или футуры не будут выполнены.
 Это означает, что цикл не будет выполнять другие задачи, пока все корутины или футуры, переданные в
  функцию asyncio.gather(), не будут выполнены. НО, эта "блокировка" не означает традиционную блокировку, как в
   синхронном подходе. Вместо этого это означает, что цикл событий будет продолжать переключаться между доступными
    задачами, пока все корутины или футуры в gather() не будут завершены.

Ограничение на количество корутин: asyncio.gather() имеет ограничение на количество корутин или футур, которые можно
 выполнять одновременно. Это ограничение зависит от реализации и платформы, поэтому следует учитывать это при
  проектировании программы. В некоторых случаях, может быть ограничено максимальное количество одновременных корутин, а
   в других случаях, может быть ограничено максимальное количество ресурсов, используемых для выполнения корутин.
    В случае, если ограничение на количество корутин слишком низкое, может потребоваться использование другого метода,
     такого как asyncio.wait(), который позволяет выполнять корутины по очереди, или разбиение корутин на группы и
      выполнение их по очереди с помощью нескольких вызовов asyncio.gather().
