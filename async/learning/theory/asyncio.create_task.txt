asyncio.create_task(coro, *, name=None, context=None)

Использование с asyncio.run(): asyncio.create_task() должна использоваться в контексте асинхронной функции, которая
 затем запускается с помощью asyncio.run(). Это связано с тем, что asyncio.run() создает новый цикл событий и закрывает
 его по завершении. Если вы создадите задачу вне этого контекста, она может быть отменена, когда цикл событий закроется.

Ожидание завершения задачи: важно помнить, что asyncio.create_task() немедленно возвращает управление, не дожидаясь
 завершения задачи. Это означает, что если вы не дождетесь завершения задачи с помощью await, задача может быть
  отменена, когда цикл событий закроется.

Обработка ошибок: если в корутине, которую вы запускаете как задачу, происходит исключение, оно не будет немедленно
выброшено. Вместо этого оно будет сохранено и выброшено, когда вы попытаетесь получить результат задачи с помощью await.
 Это означает, что вы должны быть готовы обрабатывать исключения при ожидании завершения задачи.

Отмена задач: задачи, созданные с помощью asyncio.create_task(), могут быть отменены. Это можно сделать с помощью метода
 cancel() объекта задачи. Однако отмена задачи не гарантирует немедленного прекращения ее выполнения, она лишь запускает
  процесс отмены.

Планирование задач: asyncio.create_task() планирует выполнение корутины в цикле событий. Это означает, что если у вас
 есть несколько задач, они будут выполняться в том порядке, в котором они были запланированы, но их фактическое
  выполнение может переключаться в зависимости от того, какие задачи в данный момент ожидают IO или другие операции.
